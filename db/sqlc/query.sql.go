// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const getAllPatients = `-- name: GetAllPatients :many
SELECT
    patient.id AS patient_id,
    patient.name AS patient_name,
    medical_order.id AS order_id,
    medical_order.message AS order_message
FROM
    patient
        JOIN medical_order ON patient.order_id = medical_order.id
`

type GetAllPatientsRow struct {
	PatientID    int32
	PatientName  sql.NullString
	OrderID      int32
	OrderMessage sql.NullString
}

func (q *Queries) GetAllPatients(ctx context.Context) ([]GetAllPatientsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPatients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPatientsRow
	for rows.Next() {
		var i GetAllPatientsRow
		if err := rows.Scan(
			&i.PatientID,
			&i.PatientName,
			&i.OrderID,
			&i.OrderMessage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, message FROM medical_order
WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id int32) (MedicalOrder, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, id)
	var i MedicalOrder
	err := row.Scan(&i.ID, &i.Message)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE medical_order
SET message = $1
WHERE id = $2
`

type UpdateOrderParams struct {
	Message sql.NullString
	ID      int32
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.ExecContext(ctx, updateOrder, arg.Message, arg.ID)
	return err
}
